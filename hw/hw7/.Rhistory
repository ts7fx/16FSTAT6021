library(MASS)
library(ggplot2)
library(pROC)
library(pROC)
library(ROCR)
library(ROCR)
library(dplyr)
setwd("~/Documents/Network-intrusion-detection-master/src")
kdd99 <- read.csv("kddcup.data_10_percent", header = FALSE)
View(kdd99)
kdd99 <- na.omit(kdd99)
kdd99$V42 <- as.factor(kdd99$V42) #
kdd99$V42
random_sample <- sample(nrow(kdd99),nrow(kdd99)*.95) #taking a random sample of 95% of the size of the data.
training <- kdd99[random_sample,]
testing <- kdd99[-random_sample,]
training.normal = training
testing.normal = testing
summary(kdd99)
?lda
kdd99$V3
kdd99$V1
factor(kdd99$V1)
kdd99$V20
kdd99$V21
factor(kdd99$V20)
factor(kdd99$V21)
sum(kdd99$V20)
summary(kdd99)
kdd99.lda <- lda(V42 ~ .-V1-V3-V20-V21,data=training)#why chose to drop these variables?
testing.prediction <- predict(kdd99.lda,testing)
sum(testing.prediction == testing$V42)/nrow(testing)*100
(sum(testing.prediction == testing$V42)/nrow(testing))*100
summary(testing.prediction)
summary(testing$V42)
testing.prediction
summary(testing.prediction)
testing.prediction$class
(sum(testing.prediction$class == testing$V42)/nrow(testing))*100 # yielded 0?
(sum(testing.prediction$class == testing$V42)/nrow(testing))*100 # yielded 0?
training.normal$normal[training$V42=="normal."] <- 1
training.normal$normal[training$V42!="normal."] <- 0
training.normal$normal <- as.factor(training.normal$normal)
testing.normal$normal[testing$V42=="normal."] <- 1
testing.normal$normal[testing$V42!="normal."] <- 0
testing.normal$normal <- as.factor(testing.normal$normal)
View(testing.normal)
training.normal$normal[training$V42=="normal."] <- 1
training.normal$normal[training$V42!="normal."] <- 0
training.normal$normal <- as.factor(training.normal$normal)
testing.normal$normal[testing$V42=="normal."] <- 1
testing.normal$normal[testing$V42!="normal."] <- 0
testing.normal$normal <- as.factor(testing.normal$normal)
kdd99.glm <- glm(normal ~  .-V1-V3-V20-V21-V42, data=training.normal,family=binomial) # logistic regression
log.test<-predict(kdd99.glm,testing.normal)
pred <- ROCR::prediction(log.test, testing.normal$normal)
perf <- performance(pred, measure = "tpr", x.measure = "fnr")
plot(perf, col=rainbow(10))
pred
log.test
summary(log.test)
log.test<-predict(kdd99.glm,newdata = testing.normal)
pred <- ROCR::prediction(log.test, testing.normal$normal)
log.test
pred <- ROCR::prediction(log.test, testing.normal$normal)
perf <- performance(pred, measure = "tpr", x.measure = "fnr")
plot(perf, col=rainbow(10))
fit <- kmeans(testing,2)
require(foreign)
require(neuralnet)
require(ggplot2)
require(reshape2)
library(randomForest)
kdd99.rf <- randomForest(normal ~ .-V1-V3-V20-V21-V42,data=training.normal,ntree=2,importance=TRUE)
testing.rf.pred = predict(kdd99.rf,newdata=testing.normal, type="response")
sum(testing.rf.pred == testing.normal$normal)/nrow(testing.normal)*100
kdd99.rf$importance
library(ggplot2)
ggplot(testing, aes(y=V32,x=V33,color=V42))+geom_point()
ggplot(testing, aes(y=V23,x=V24,color=V42))+geom_point()
ggplot(testing, aes(y=V32,x=V33,color=V42))+geom_point()
?geom_point
?subset
sum(ipsrc=="172.16.112.10")
?aggregate
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
View(testDF)
by1 <- c("red", "blue", 1, 2, NA, "big", 1, 2, "red", 1, NA, 12)
by2 <- c("wet", "dry", 99, 95, NA, "damp", 95, 99, "red", 99, NA, NA)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean")
View(kdd99)
View(kdd99)
library(MASS)
library(ggplot2)
library(pROC)
library(ROCR)
library(dplyr)
setwd("~/Documents/Network-intrusion-detection-master/src")
kdd99 <- read.csv("kddcup.data_10_percent", header = FALSE)
kdd99$V3#type of service
factor(kdd99$V1) #duration
summary(k99$V1)
summary(kdd99$V1)
log(kdd99$V1+.01)
summary(log(kdd99$V1+.01))
summary(kdd99$V20)
factor(kdd99$V20) # all zeros num_outbound_cmds: continuous.
factor(kdd99$V21) # all zeros is_host_login: symbolic.
testing.prediction <- predict(kdd99.lda,testing)
(sum(testing.prediction$class == testing$V42)/nrow(testing))*100
training.normal$normal[training$V42=="normal."] <- 1
training.normal$normal[training$V42!="normal."] <- 0
training.normal$normal <- as.factor(training.normal$normal)
testing.normal$normal[testing$V42=="normal."] <- 1
testing.normal$normal[testing$V42!="normal."] <- 0
testing.normal$normal <- as.factor(testing.normal$normal)
kdd99.glm <- glm(normal ~  .-V1-V3-V20-V21-V42, data=training.normal,family=binomial) # logistic regression
l
kdd99.glm <- glm(normal ~  .-V1-V3-V20-V21-V42, data=training.normal,family=binomial) # logistic regression
log.test<-predict(kdd99.glm,newdata = testing.normal)
pred <- ROCR::prediction(log.test, testing.normal$normal)
perf <- performance(pred, measure = "tpr", x.measure = "fnr")
plot(perf, col=rainbow(10))# for some reason this did not work well.
summary(log.test)
View(testing.normal)
fit <- kmeans(testing,2)
library(ggplot2)
ggplot(testing, aes(y=V32,x=V33,color=V42))+geom_point()
ggplot(testing, aes(y=V23,x=V24,color=V42))+geom_point()
ggplot(testing, aes(y=V15,x=V16,color=V42))+geom_point()
setwd("~/Documents/git/16FSTAT6021/hw/hw7")
data.13.1 <- read.xls("data-prob-13-1.XLS")
library(gdata)
library(dplyr)
library(leaps)
data.13.1 <- read.xls("data-prob-13-1.XLS")
View(data.13.1)
glm.13.1 <- glm(y~x, family=binomial, data=data.13.1)
summary(glm.13.1)
#13.2
anova(glm.13.1)
dev.13.1<-residuals(glm.13.1, c = 'deviance')
dev.13.1
sum(dev.13.1)
summary(glm.13.1)
anova(glm.13.1, test="Chisq")
View(data.13.1)
1/(1 + exp(-6.07))
1/(1 + exp(-6.07+0.177))
(1 + exp(-6.07+0.177*2))
0.177*2
(1 + exp(-6.07+0.354))
1/(1 + exp(-6.07+0.354))
data.13.1$x2<- data.13.1$x^2
glm.13.1 <- glm(y~., family=binomial, data=data.13.1)
glm.13.1b <- glm(y~., family=binomial, data=data.13.1)
anova(glm.13.1b, test="Chisq")
data.13.2 <- read.xls("data-prob-13-2.XLS")
glm.13.2 <- glm(y~x, family=binomial, data=data.13.2)
summary(glm.13.2)
anova(glm.13.2, test="Chisq")
1/(1 + exp(-8.74))
1/(1 + exp(-8.74-0.0002))
1/(1 + exp(-8.74-0.0002*1000))
(1 + exp(-8.74-0.0002*10000))
1/(1 + exp(-8.74-0.0002*10000))
data.13.2$x2<- data.13.2$x^2
glm.13.2b <- glm(y~., family=binomial, data=data.13.2)
anova(glm.13.2b, test="Chisq")
