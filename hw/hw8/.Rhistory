msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
mean.B2
var.B2
var.MSE
mean.MSE
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data1[sample.int(1000, size = 500),]
temp<-hot.deck(data.sample.temp)
data.sample.temp <- as.data.frame(temp[1])
# re-fit a linear model every time
lm.sample.temp <- lm(price~., data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
data.sample.temp <- data1[sample.int(1000, size = 500),]
temp<-hot.deck(data.sample.temp)
data.sample.temp <- as.data.frame(temp[1])
View(data1.sample.temp)
# re-fit a linear model every time
lm.sample.temp <- lm(price~., data = data.sample.temp)
View(data.sample.temp)
data.sample.temp <- data1[sample.int(1000, size = 500),]
temp<-hot.deck(data.sample.temp)
a<as.data.frame(temp[1])
a<-as.data.frame(temp[1])
View(a)
data.sample.temp <- data1[sample.int(1000, size = 500),]
temp<-hot.deck(data.sample.temp,m=1)
data.sample.temp <- as.data.frame(temp[1])
View(data.sample.temp)
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data1[sample.int(1000, size = 500),]
temp<-hot.deck(data.sample.temp,m=1)
data.sample.temp <- as.data.frame(temp[1])
# re-fit a linear model every time
lm.sample.temp <- lm(price~., data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
data.sample.temp <- data1[sample.int(1000, size = 500),]
temp<-hot.deck(data.sample.temp,m=1)
data.sample.temp <- as.data.frame(temp[1])
View(data.sample.temp)
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data1[sample.int(1000, size = 500),]
temp<-hot.deck(data.sample.temp,m=1)
data.sample.temp <- as.data.frame(temp[1])
colnames(data.sample.temp) <- c('price','size','rating')
# re-fit a linear model every time
lm.sample.temp <- lm(price~., data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
mean.B2
var.B1
var.B2
mean.MSE
var.MSE
size.ratio
rating.ratio
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data2[sample.int(1000, size = 500),]
temp<-hot.deck(data.sample.temp,m=1)
data.sample.temp <- as.data.frame(temp[1])
colnames(data.sample.temp) <- c('price','size','rating')
# re-fit a linear model every time
lm.sample.temp <- lm(price~., data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
mean.B2
var.B1
var.B2
mean.MSE
var.MSE
size.ratio
rating.ratio
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data3[sample.int(1000, size = 500),]
temp<-hot.deck(data.sample.temp,m=1)
data.sample.temp <- as.data.frame(temp[1])
colnames(data.sample.temp) <- c('price','size','rating')
# re-fit a linear model every time
lm.sample.temp <- lm(price~., data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
mean.B2
var.B1
var.B2
mean.MSE
var.MSE
size.ratio
rating.ratio
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data1[sample.int(1000, size = 500),]
imp <- mice(data.sample.temp, method = "ri", m = 1)
data.sample.temp <- complete(imp)
# re-fit a linear model every time
lm.sample.temp <- lm(price~., data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
mean.B2
var.B1
var.B2
mean.MSE
var.MSE
size.ratio
rating.ratio
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data2[sample.int(1000, size = 500),]
imp <- mice(data.sample.temp, method = "ri", m = 1)
data.sample.temp <- complete(imp)
# re-fit a linear model every time
lm.sample.temp <- lm(price~., data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
mean.B2
var.B1
var.B2
mean.MSE
var.MSE
size.ratio
rating.ratio
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data2[sample.int(1000, size = 500),]
imp <- mice(data.sample.temp, method = "ri", m = 1)
data.sample.temp <- complete(imp)
# re-fit a linear model every time
lm.sample.temp <- lm(price~., data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
mean.B2
var.B1
var.B2
mean.MSE
var.MSE
size.ratio
rating.ratio
library(VIM)
install.packages("VIM")
library(VIM)
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data3[sample.int(1000, size = 500),]
imp <- mice(data.sample.temp, method = "ri", m = 1)
data.sample.temp <- complete(imp)
# re-fit a linear model every time
lm.sample.temp <- lm(price~., data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
size.ratio
rating.ratio
mean.B2
var.B1
var.B2
mean.MSE
var.MSE
data.sample.temp <- data1[sample.int(1000, size = 500),]
imp <- kNN(data.sample.temp)
View(imp)
View(data.sample.temp)
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data1[sample.int(1000, size = 500),]
data.sample.temp <- kNN(data.sample.temp)
# re-fit a linear model every time
lm.sample.temp <- lm(price~size+rating, data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
mean.B2
var.B1
var.B2
mean.MSE
var.MSE
size.ratio
rating.ratio
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data2[sample.int(1000, size = 500),]
data.sample.temp <- kNN(data.sample.temp)
# re-fit a linear model every time
lm.sample.temp <- lm(price~size+rating, data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
mean.B2
var.B1
var.B2
mean.MSE
var.MSE
size.ratio
rating.ratio
b1vec<-vector()
b2vec<-vector()
msevec<-vector()
sizeboolvec<-vector()
ratingboolvec<-vector()
for (i in 1:1000){
# re-sample every time
data.sample.temp <- data3[sample.int(1000, size = 500),]
data.sample.temp <- kNN(data.sample.temp)
# re-fit a linear model every time
lm.sample.temp <- lm(price~size+rating, data = data.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
# predict:
y.pred.temp <- predict(lm.sample.temp)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data.sample.temp$price - y.pred.temp)^2) / nrow(data.sample.temp)
# generate 95% CI of model
conf <- confint(lm.sample.temp, level=0.95)
sizeboolvec[i]<- conf[2,1]<5.6 & 5.6<conf[2,2]
ratingboolvec[i] <- conf[3,1]<3.8 & 3.8<conf[3,2]
}
mean.B1 <- mean(b1vec)
mean.B2 <- mean(b2vec)
var.B1 <- var(b1vec)
var.B2 <- var(b2vec)
mean.MSE <- mean(msevec)
var.MSE <- var(msevec)
size.ratio <- sum(sizeboolvec)/1000
rating.ratio <- sum(ratingboolvec)/1000
mean.B1
mean.B2
var.B1
var.B2
mean.MSE
var.MSE
size.ratio
rating.ratio
