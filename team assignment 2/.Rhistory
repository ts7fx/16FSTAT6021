pvecp <- pvec / 20
#
mean(pvecp)
mean(pvec)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 20
#
mean(pvecp)
mean(pvec)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 20
#
mean(pvecp)
mean(pvec)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 20
#
mean(pvecp)
mean(pvec)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 20
#
mean(pvecp)
mean(pvec)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 20
#
mean(pvecp)
mean(pvec)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 19
#
mean(pvecp)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 19
#
mean(pvecp)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 19
#
mean(pvecp)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 19
#
mean(pvecp)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 19
#
mean(pvecp)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 19
#
mean(pvecp)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 19
#
mean(pvecp)
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 19
#
mean(pvecp)
pvec<-vector()
for (i in 1:1000){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 20
#
mean(pvecp)
pvec<-vector()
for (i in 1:1000){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 20
#
mean(pvecp)
pvec<-vector()
for (i in 1:1000){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 20
#
mean(pvecp)
pvec<-vector()
for (i in 1:1000){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration (# of significant variables)/(total number of variables)
pvecp <- pvec / 20
#
mean(pvecp)
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
# repeat a-c for 100 times
pvec<-vector()
for (i in 1:100){
# for each iteration, regenerate 100 y values and pair them up with the x-values
ytemp<-rnorm(100, mean=10, sd = 5)
qtemp <-cbind(ytemp,q)
lm.temp <- lm(y~., data = qtemp)
tempp <- summary(lm.temp)$coefficients[2:21,4]
pvec[i]<-length(subset(tempp, tempp<=0.05))
}
#   (d) Determine and report the proportion of significant variables in the 100
#       simulations. Compare this proportion with the expected theoretical value.
# initiate a vector that store the proportion of significant variables over the total number of variables for each iteration.
# find the mean of that vector. then compare with the expected theoretical value.
# the expected theoretical value is 0.05. the actually mean of the proportion vector is
mean(pvecp)
