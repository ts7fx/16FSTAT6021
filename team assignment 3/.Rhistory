summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),500), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),1000), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),1000), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),1000), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),1000), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),100), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
b1vec.b<-vector()
b3vec.b<-vector()
b4vec.b<-vector()
msevec.b<-vector()
for (i in 1:1000){
# re-sample every time
data01.sample.temp <- data01[sample(c(1:nrow(data01)),100), ]
# re-fit a linear model every time
lm.sample.temp <- lm(y~.-x2, data = data01.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec.b[i] = coef(lm.sample.temp)[2]
b3vec.b[i] = coef(lm.sample.temp)[3]
b4vec.b[i] = coef(lm.sample.temp)[4]
# predict:
y.pred.temp <- predict(lm.sample.temp, newdata = data02)
# calculate MSE, store in ith position in vector intiated above
msevec.b[i] <- sum((data02$y - y.pred.temp)^2) / 195
}
sd.B1.b <- sd(b1vec.b)
sd.B3.b <- sd(b3vec.b)
sd.B4.b <- sd(b4vec.b)
mean.MSE.b <- mean(msevec.b)
View(data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),100), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~.-x2, data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),100), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~.-x2, data = data01.sample)
summary(lm.data01.sample)
data01.sample <- data01[sample(c(1:nrow(data01)),100), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~.-x2, data = data01.sample)
summary(lm.data01.sample)
sd.B1
sd.B2
sd.B3
data01.sample <- data01[sample(c(1:nrow(data01)),100), ]
#       (2) Fit a linear model to the 100 observations using all four variables. Save the values
#           of the estimated coefficients in separate vectors.
lm.data01.sample <- lm(y~., data = data01.sample)
summary(lm.data01.sample)
sd.B4
mean.MSE
sd.B1.b
sd.B3.b
sd.B4.b
mean.MSE.b
b1vec<-vector()
b2vec<-vector()
b3vec<-vector()
b4vec<-vector()
msevec<-vector()
for (i in 1:1000){
# re-sample every time
data01.sample.temp <- data01[sample(c(1:nrow(data01)),100), ]
# re-fit a linear model every time
lm.sample.temp <- lm(y~., data = data01.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec[i] = coef(lm.sample.temp)[2]
b2vec[i] = coef(lm.sample.temp)[3]
b3vec[i] = coef(lm.sample.temp)[4]
b4vec[i] = coef(lm.sample.temp)[5]
# predict:
y.pred.temp <- predict(lm.sample.temp, newdata = data02)
# calculate MSE, store in ith position in vector intiated above
msevec[i] <- sum((data02$y - y.pred.temp)^2) / 195
}
sd.B1 <- sd(b1vec) #3.507392
sd.B2 <- sd(b2vec) #3.519516
sd.B3 <- sd(b3vec) #3.509577
sd.B4 <- sd(b4vec) #0.1357072
mean.MSE <- mean(msevec) #410.9689
b1vec.b<-vector()
b3vec.b<-vector()
b4vec.b<-vector()
msevec.b<-vector()
for (i in 1:1000){
# re-sample every time
data01.sample.temp <- data01[sample(c(1:nrow(data01)),100), ]
# re-fit a linear model every time
lm.sample.temp <- lm(y~.-x2, data = data01.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec.b[i] = coef(lm.sample.temp)[2]
b3vec.b[i] = coef(lm.sample.temp)[3]
b4vec.b[i] = coef(lm.sample.temp)[4]
# predict:
y.pred.temp <- predict(lm.sample.temp, newdata = data02)
# calculate MSE, store in ith position in vector intiated above
msevec.b[i] <- sum((data02$y - y.pred.temp)^2) / 195
}
sd.B1.b <- sd(b1vec.b) #0.1937136
sd.B3.b <- sd(b3vec.b) #0.1372232
sd.B4.b <- sd(b4vec.b) #0.1345685
mean.MSE.b <- mean(msevec.b) #408.7249
b1vec.b<-vector()
b3vec.b<-vector()
b4vec.b<-vector()
msevec.b<-vector()
for (i in 1:1000){
# re-sample every time
data01.sample.temp <- data01[sample(c(1:nrow(data01)),100), ]
# re-fit a linear model every time without x2
lm.sample.temp <- lm(y~.-x4, data = data01.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec.b[i] = coef(lm.sample.temp)[2]
b3vec.b[i] = coef(lm.sample.temp)[3]
b4vec.b[i] = coef(lm.sample.temp)[4]
# predict:
y.pred.temp <- predict(lm.sample.temp, newdata = data02)
# calculate MSE, store in ith position in vector intiated above
msevec.b[i] <- sum((data02$y - y.pred.temp)^2) / 195
}
sd.B1.b <- sd(b1vec.b) #0.1937136
sd.B3.b <- sd(b3vec.b) #0.1372232
sd.B4.b <- sd(b4vec.b) #0.1345685
mean.MSE.b <- mean(msevec.b) #408.7249
for (i in 1:1000){
# re-sample every time
data01.sample.temp <- data01[sample(c(1:nrow(data01)),100), ]
# re-fit a linear model every time without x2
lm.sample.temp <- lm(y~.-x1, data = data01.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec.b[i] = coef(lm.sample.temp)[2]
b3vec.b[i] = coef(lm.sample.temp)[3]
b4vec.b[i] = coef(lm.sample.temp)[4]
# predict:
y.pred.temp <- predict(lm.sample.temp, newdata = data02)
# calculate MSE, store in ith position in vector intiated above
msevec.b[i] <- sum((data02$y - y.pred.temp)^2) / 195
}
sd.B1.b <- sd(b1vec.b) #0.1937136
sd.B3.b <- sd(b3vec.b) #0.1372232
sd.B4.b <- sd(b4vec.b) #0.1345685
mean.MSE.b <- mean(msevec.b) #408.7249
sd.B1.b
sd.B3.b
sd.B4.b
lm.sample.temp <- lm(y~.-x3, data = data01.sample.temp)
b1vec.b<-vector()
b3vec.b<-vector()
b4vec.b<-vector()
msevec.b<-vector()
for (i in 1:1000){
# re-sample every time
data01.sample.temp <- data01[sample(c(1:nrow(data01)),100), ]
# re-fit a linear model every time without x2
lm.sample.temp <- lm(y~.-x3, data = data01.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec.b[i] = coef(lm.sample.temp)[2]
b3vec.b[i] = coef(lm.sample.temp)[3]
b4vec.b[i] = coef(lm.sample.temp)[4]
# predict:
y.pred.temp <- predict(lm.sample.temp, newdata = data02)
# calculate MSE, store in ith position in vector intiated above
msevec.b[i] <- sum((data02$y - y.pred.temp)^2) / 195
}
sd.B1.b
sd.B3.b
sd.B4.b
b1vec.b<-vector()
b3vec.b<-vector()
b4vec.b<-vector()
msevec.b<-vector()
for (i in 1:1000){
# re-sample every time
data01.sample.temp <- data01[sample(c(1:nrow(data01)),100), ]
# re-fit a linear model every time without x2
lm.sample.temp <- lm(y~.-x2, data = data01.sample.temp)
# store betas in ith position in vectors intiated earlier
b1vec.b[i] = coef(lm.sample.temp)[2]
b3vec.b[i] = coef(lm.sample.temp)[3]
b4vec.b[i] = coef(lm.sample.temp)[4]
# predict:
y.pred.temp <- predict(lm.sample.temp, newdata = data02)
# calculate MSE, store in ith position in vector intiated above
msevec.b[i] <- sum((data02$y - y.pred.temp)^2) / 195
}
sd.B1.b
sd.B3.b
sd.B4.b
mean.MSE.b
data01.sample.temp <- data01[sample(c(1:nrow(data01)),100), ]
# re-fit a linear model every time without x2
lm.sample.temp <- lm(y~.-x2, data = data01.sample.temp)
summary(lm.sample.temp)
data.Q2<- read.xls("data-table-B2.XLS")
summary(lm(y~. ,data = data.Q2)) # remove x5
summary(lm(y~. -x5,data = data.Q2)) # remove x1
summary(lm(y~. -x5-x1,data = data.Q2)) # remove x2
summary(lm(y~. -x5-x1-x2,data = data.Q2)) # everything is significant
lm.final <- lm(y~. -x5-x1-x2,data = data.Q2)
PRESS <- residuals(lm.final)/(1 - lm.influence(lm.final)$hat)
PRESS
resid(lm.final)
## Find the standardized residuals
stdres(lm.final)
## Find the studentized residuals
studres(lm.final)
## Find the PRESS residuals
PRESS <- residuals(lm.final)/(1 - lm.influence(lm.final)$hat)
## Find the R-student residuals
rstudent(lm.final)
)
plot(resid(lm.final))
View(data.Q2)
rstudent(lm.final, lm.final$fitted.values)
plot(lm.final$fitted.values,resid(lm.final))
PRESS <- residuals(lm.final)/(1 - lm.influence(lm.final)$hat)
par(mfrow=c(3,2))
plot(lm.final$fitted.values,resid(lm.final))
plot(lm.final$fitted.values,stdres(lm.final))
plot(lm.final$fitted.values,rstandard(lm.final))
plot(lm.final$fitted.values,PRESS)
plot(lm.final$fitted.values,rstudent(lm.final))
?plot
plot(lm.final$fitted.values,resid(lm.final),main="residuals")
plot(lm.final$fitted.values,resid(lm.final),main="residuals")
plot(lm.final$fitted.values,stdres(lm.final),main="standardized residuals")
plot(lm.final$fitted.values,rstandard(lm.final),main="studentized residuals")
plot(lm.final$fitted.values,PRESS,main="PRESS residuals")
plot(lm.final$fitted.values,rstudent(lm.final),main="R-student residuals")
resid(lm.final)
## Find the standardized residuals
stdres(lm.final)
## Find the studentized residuals
rstandard(lm.final)
## Find the PRESS residuals
PRESS
mean(resid(lm.final)
)
mean(resid(lm.final))
resid(lm.final)
sd()
sd(resid(lm.final))
sum(resid(lm.final))
confint(resid(lm.final))
resid(lm.final)
class(resid(lm.final))
?confint
predict(resid(lm.final), interval="confidence")
confint(resid(lm.final))
?plot
qqnorm(rstudent(lm.final))
qqline(rstudent(lm.final))
plot(lm.final$fitted.values,resid(lm.final),main="residuals")
plot(lm.final$fitted.values,stdres(lm.final),main="standardized residuals")
plot(lm.final$fitted.values,rstandard(lm.final),main="studentized residuals")
plot(lm.final$fitted.values,PRESS,main="PRESS residuals")
plot(lm.final$fitted.values,rstudent(lm.final),main="R-student residuals")
t.test(resid(lm.final), conf.level = 0.9)
t.test(resid(lm.final), conf.level = 0.95)
class(t.test(resid(lm.final), conf.level = 0.95))
t.test(resid(lm.final)$conf.int
t.test(resid(lm.final))$conf.int
class(t.test(resid(lm.final))$conf.int)
t.test(resid(lm.final))$conf.int[1]
t.test(resid(lm.final))$conf.int[2]
plot(lm.final$fitted.values,resid(lm.final),main="residuals")
abline(a=t.test(resid(lm.final))$conf.int[1])
plot(lm.final$fitted.values,resid(lm.final),main="residuals")
abline(a=t.test(resid(lm.final))$conf.int[1])
?abline
plot(lm.final$fitted.values,resid(lm.final),main="residuals")
abline(a=t.test(resid(lm.final))$conf.int[1], b=0)
par(mfrow=c(2,2))
par(mfrow=c(1,1))
plot(lm.final$fitted.values,resid(lm.final),main="residuals")
sd(resid(lm.final))
par(mfrow=c(3,2))
plot(lm.final$fitted.values,resid(lm.final),main="residuals")
plot(lm.final$fitted.values,stdres(lm.final),main="standardized residuals")
plot(lm.final$fitted.values,rstandard(lm.final),main="studentized residuals")
plot(lm.final$fitted.values,PRESS,main="PRESS residuals")
plot(lm.final$fitted.values,rstudent(lm.final),main="R-student residuals")
max(abs(resid(lm.final)))
boxplot(rstudent(lm.final)
)
par(mfrow=c(1,1))
boxplot(rstudent(lm.final))
boxplot(PRESS)
par(mfrow=c(3,2))
boxplot(resid(lm.final),main="residuals")
boxplot(stdres(lm.final),main="standardized residuals")
boxplot(rstandard(lm.final),main="studentized residuals")
boxplot(PRESS,main="PRESS residuals")
boxplot(rstudent(lm.final), main="R-student residuals")
qqnorm(rstudent(lm.final))
qqline(rstudent(lm.final))
?mfrow
??mfrow
?par
par(mfrow=c(1,1))
qqnorm(rstudent(lm.final))
qqline(rstudent(lm.final))
boxplot(resid(lm.final),main="residuals")
boxplot(stdres(lm.final),main="standardized residuals")
boxplot(rstandard(lm.final),main="studentized residuals")
boxplot(PRESS,main="PRESS residuals")
boxplot(rstudent(lm.final), main="R-student residuals")
par(mfrow=c(3,2))
boxplot(resid(lm.final),main="residuals")
boxplot(stdres(lm.final),main="standardized residuals")
boxplot(rstandard(lm.final),main="studentized residuals")
boxplot(PRESS,main="PRESS residuals")
boxplot(rstudent(lm.final), main="R-student residuals")
par(mfrow=c(3,2))
plot(data.Q2$x1,rstudent(lm.final))
abline(a=0,b=0)
plot(data.Q2$x2,rstudent(lm.final))
abline(a=0,b=0)
plot(data.Q2$x3,rstudent(lm.final))
abline(a=0,b=0)
plot(data.Q2$x4,rstudent(lm.final))
abline(a=0,b=0)
plot(data.Q2$x5,rstudent(lm.final))
abline(a=0,b=0)
plot(lm.final$fitted.values,rstudent(lm.final))
abline(a=0,b=0)
par(mfrow=c(3,2))
plot(lm.final$fitted.values,rstudent(lm.final))
abline(a=0,b=0)
plot(data.Q2$x1,rstudent(lm.final))
abline(a=0,b=0)
plot(data.Q2$x2,rstudent(lm.final))
abline(a=0,b=0)
plot(data.Q2$x3,rstudent(lm.final))
abline(a=0,b=0)
plot(data.Q2$x4,rstudent(lm.final))
abline(a=0,b=0)
plot(data.Q2$x5,rstudent(lm.final))
abline(a=0,b=0)
